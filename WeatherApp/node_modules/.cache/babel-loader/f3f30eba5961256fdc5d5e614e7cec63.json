{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\WeatherApp\\\\src\\\\App.js\";\n//imports all the CSS files, weather components, and 3rd party add ons\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport React from 'react';\nimport Titles from './components/title';\nimport Forms from './components/forms';\nimport Weather from './components/weather';\nimport MapContainer from './components/googlemap';\nimport ReactDOM from 'react-dom';\nimport { Circle } from 'react-preloaders';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); //binds getweather so it can modify state\n\n    this.getweather = async function fetchAsync(e) {\n      //prevent page refresh when page content is updated\n      e.preventDefault(); //gets city name from input box\n\n      const city = e.target.city.value; //gets iso code from input box\n\n      const country = e.target.country.value; //formualtes URL\n\n      const URL = 'https://api.openweathermap.org/data/2.5/weather?q=' + city + ',' + country + '&APPID=14b174dcab9bf47b49468e07daa1ff87';\n      const fiveDayUrl = 'https://api.openweathermap.org/data/2.5/forecast?q=' + city + ',' + country + '&APPID=14b174dcab9bf47b49468e07daa1ff87'; // await response of fetch call\n\n      const response = await fetch(URL);\n      const FiveDayResponse = await fetch(fiveDayUrl); //converts responds to json\n\n      const results = await response.json();\n      const FiveDayResults = await FiveDayResponse.json(); //checks if city and country are not blank and the returned response is not an error\n\n      if (city && country && response.status !== 404) {\n        //converts temp form K to F\n        const temp = Number(((results.main.temp - 273.15) * 9 / 5 + 32).toFixed(2)); //gets the appropriate icon for the weather\n\n        var IconUrl = \"https://openweathermap.org/img/wn/\" + results.weather[0].icon + \"@2x.png\"; //sets the state to be passed on to the compoents below\n\n        this.setState({\n          error: \"\",\n          temperature: temp,\n          city: results.name,\n          country: results.sys.country,\n          lat: results.coord.lat,\n          lon: results.coord.lon,\n          Desc: results.weather[0].description,\n          Icon: IconUrl,\n          FiveDayResultsList: FiveDayResults.list\n        });\n      } else {\n        //CLEARS OUT ALL THE STATE    \n        const ErrMsg = 'Opps!! Something went wrong. Please ensure both fields are filled out and are valid entities';\n        await this.setState({\n          error: ErrMsg,\n          temperature: \"\",\n          city: \"\",\n          country: \"\",\n          lat: \"\",\n          lon: \"\",\n          Desc: \"\",\n          Icon: \"\",\n          FiveDayResultsList: []\n        });\n      }\n    };\n\n    this.GetIntiWeath = async function GetIntiWeath() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async position => {\n          const lat = position.coords.latitude;\n          const lon = position.coords.longitude;\n          console.log(lat);\n          console.log(lon);\n          const URL = 'https://api.openweathermap.org/data/2.5/weather?lat=' + lat + '&lon=' + lon + '&APPID=14b174dcab9bf47b49468e07daa1ff87';\n          const fiveDayUrl = 'https://api.openweathermap.org/data/2.5/forecast?lat=' + lat + '&lon=' + lon + '&APPID=14b174dcab9bf47b49468e07daa1ff87';\n          console.log(URL);\n          const response = await fetch(URL);\n          const FiveDayResponse = await fetch(fiveDayUrl);\n          console.log(response);\n          const results = await response.json();\n          const FiveDayResults = await FiveDayResponse.json();\n          const temp = Number(((results.main.temp - 273.15) * 9 / 5 + 32).toFixed(2));\n          var IconUrl = \"https://openweathermap.org/img/wn/\" + results.weather[0].icon + \"@2x.png\";\n          this.setState({\n            error: \"\",\n            temperature: temp,\n            city: results.name,\n            country: results.sys.country,\n            lat: position.coords.latitude,\n            lon: position.coords.longitude,\n            Desc: results.weather[0].description,\n            Icon: IconUrl,\n            FiveDayResultsList: FiveDayResults.list\n          });\n        });\n      } else {\n        alert(\"Geolocation is not supported by this browser.\");\n      }\n    };\n\n    this.getweather = this.getweather.bind(this);\n    this.GetIntiWeath = this.GetIntiWeath.bind(this); //setting state of component\n\n    this.state = {\n      error: undefined,\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      lat: undefined,\n      lon: undefined,\n      Desc: undefined,\n      Icon: undefined,\n      in: true,\n      FiveDayResultsList: []\n    };\n  } // async function\n\n\n  componentDidMount() {\n    // Get the components DOM node\n    const elem = ReactDOM.findDOMNode(this); // Set the opacity of the element to 0\n\n    elem.style.opacity = 0;\n    setTimeout(() => {\n      // Now set a transition on the opacity\n      elem.style.transition = \"opacity 2000ms\"; // and set the opacity to 1\n\n      elem.style.opacity = 1;\n    }, 3000);\n    this.GetIntiWeath();\n    document.title = \"Weather App\";\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"background\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(Titles, {\n      in: this.state.in,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(Forms, {\n      loadWeather: this.getweather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    })), React.createElement(Weather, {\n      WeatherCompError: this.state.error,\n      WeatherCompCity: this.state.city,\n      WeatherCompCountry: this.state.country,\n      WeatherCompTemp: this.state.temperature,\n      WeatherCompDesc: this.state.Desc,\n      WeatherCompIcon: this.state.Icon,\n      WeatherFiveDay: this.state.FiveDayResultsList,\n      in: this.state.in,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"map\",\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(MapContainer, {\n      Weatherlat: this.state.lat,\n      Weatherlon: this.state.lon,\n      zoom: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })), React.createElement(Circle, {\n      animation: \"slide-down\",\n      time: 1500,\n      color: \"#FFFAF0\",\n      background: \"radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\bob\\Documents\\Visual Studio 2015\\Projects\\my-app\\WeatherApp\\src\\App.js"],"names":["React","Titles","Forms","Weather","MapContainer","ReactDOM","Circle","App","Component","constructor","props","getweather","fetchAsync","e","preventDefault","city","target","value","country","URL","fiveDayUrl","response","fetch","FiveDayResponse","results","json","FiveDayResults","status","temp","Number","main","toFixed","IconUrl","weather","icon","setState","error","temperature","name","sys","lat","coord","lon","Desc","description","Icon","FiveDayResultsList","list","ErrMsg","GetIntiWeath","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","alert","bind","state","undefined","in","componentDidMount","elem","findDOMNode","style","opacity","setTimeout","transition","document","title","render"],"mappings":"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","sourcesContent":["//imports all the CSS files, weather components, and 3rd party add ons\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css'\r\nimport React from 'react';\r\nimport Titles from './components/title'\r\nimport Forms from './components/forms'\r\nimport Weather from './components/weather'\r\nimport MapContainer from './components/googlemap'\r\nimport ReactDOM from 'react-dom';\r\nimport {Circle} from 'react-preloaders';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        //binds getweather so it can modify state\r\n        this.getweather = this.getweather.bind(this)\r\n        this.GetIntiWeath = this.GetIntiWeath.bind(this)\r\n        //setting state of component\r\n        this.state = {\r\n                 error: undefined,\r\n                 temperature: undefined,\r\n                 city: undefined,\r\n                 country: undefined,\r\n                 lat : undefined,\r\n                 lon: undefined,\r\n                 Desc : undefined,\r\n                 Icon : undefined,\r\n                 in: true,\r\n                 FiveDayResultsList : []\r\n\r\n        } \r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n      \r\n\r\n\r\n// async function\r\n    getweather = async function fetchAsync(e) {\r\n \r\n    \r\n        //prevent page refresh when page content is updated\r\n        e.preventDefault();\r\n    //gets city name from input box\r\n    const city = e.target.city.value\r\n    //gets iso code from input box\r\n    const country = e.target.country.value\r\n    //formualtes URL\r\n    const URL = 'https://api.openweathermap.org/data/2.5/weather?q=' + city + ',' + country + '&APPID=14b174dcab9bf47b49468e07daa1ff87'\r\n    const fiveDayUrl = 'https://api.openweathermap.org/data/2.5/forecast?q=' + city + ',' + country + '&APPID=14b174dcab9bf47b49468e07daa1ff87'\r\n    // await response of fetch call\r\n    const response = await fetch(URL);\r\n    const FiveDayResponse = await fetch(fiveDayUrl);\r\n    //converts responds to json\r\n    const results = await response.json(); \r\n    const FiveDayResults = await FiveDayResponse.json(); \r\n\r\n    \r\n\r\n    //checks if city and country are not blank and the returned response is not an error\r\n    if(city && country && response.status !== 404){\r\n    //converts temp form K to F\r\n    const temp = Number(( (((results.main.temp - 273.15) * 9)/5) + 32).toFixed(2))\r\n    \r\n    //gets the appropriate icon for the weather\r\n    var IconUrl = \"https://openweathermap.org/img/wn/\" + results.weather[0].icon + \"@2x.png\"    \r\n\r\n    //sets the state to be passed on to the compoents below\r\n    this.setState ({\r\n    error: \"\",\r\n    temperature: temp,\r\n    city: results.name,\r\n    country: results.sys.country,\r\n    lat: results.coord.lat,\r\n    lon: results.coord.lon,\r\n    Desc : results.weather[0].description,\r\n    Icon : IconUrl,\r\n    FiveDayResultsList : FiveDayResults.list\r\n    })\r\n\r\n\r\n\r\n} else {     \r\n    \r\n    //CLEARS OUT ALL THE STATE    \r\n    const ErrMsg = 'Opps!! Something went wrong. Please ensure both fields are filled out and are valid entities'\r\n    await this.setState({\r\n    error: ErrMsg,\r\n    temperature: \"\",\r\n    city: \"\",\r\n    country: \"\",\r\n    lat: \"\",\r\n    lon: \"\",\r\n    Desc : \"\",\r\n    Icon : \"\",\r\n    FiveDayResultsList : []\r\n})} \r\n    \r\n   \r\n\r\n    \r\n \r\n}\r\n\r\n\r\nGetIntiWeath = async function GetIntiWeath() {\r\n   \r\n    if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(async (position) => {\r\n\r\n            const lat = position.coords.latitude\r\n            const lon =  position.coords.longitude\r\n            console.log(lat)\r\n            console.log(lon)\r\n            const URL = 'https://api.openweathermap.org/data/2.5/weather?lat=' + lat + '&lon=' + lon + '&APPID=14b174dcab9bf47b49468e07daa1ff87'\r\n            const fiveDayUrl  = 'https://api.openweathermap.org/data/2.5/forecast?lat=' + lat + '&lon=' + lon + '&APPID=14b174dcab9bf47b49468e07daa1ff87'\r\n            \r\n            console.log(URL)\r\n            const response = await fetch(URL);\r\n            const FiveDayResponse = await fetch(fiveDayUrl);\r\n            console.log(response)\r\n            const results = await response.json();\r\n            const FiveDayResults = await FiveDayResponse.json(); \r\n            const temp = Number(( (((results.main.temp - 273.15) * 9)/5) + 32).toFixed(2))\r\n    \r\n\r\n            var IconUrl = \"https://openweathermap.org/img/wn/\" + results.weather[0].icon + \"@2x.png\" ;  \r\n            \r\n            \r\n            this.setState ({\r\n                    error: \"\",\r\n                    temperature: temp,\r\n                    city: results.name,\r\n                    country: results.sys.country,\r\n                    lat: position.coords.latitude,\r\n                    lon: position.coords.longitude,\r\n                    Desc : results.weather[0].description,\r\n                    Icon : IconUrl,\r\n                    FiveDayResultsList : FiveDayResults.list\r\n                    })\r\n\t\t\t      \r\n            \r\n\r\n\r\n\r\n\r\n        });\r\n      } else {\r\n        alert(\"Geolocation is not supported by this browser.\")  }\r\n    \r\n  \r\n}\r\n\r\ncomponentDidMount () {\r\n   \r\n    // Get the components DOM node\r\n     const elem = ReactDOM.findDOMNode(this);\r\n    // Set the opacity of the element to 0\r\n    elem.style.opacity = 0;\r\n    \r\n    setTimeout(() => {\r\n        // Now set a transition on the opacity\r\n        elem.style.transition = \"opacity 2000ms\";\r\n        // and set the opacity to 1\r\n    elem.style.opacity = 1;\r\n    }, 3000);\r\n    \r\n    this.GetIntiWeath()\r\n    document.title = \"Weather App\"\r\n\r\n\r\n}\r\n\r\n\r\n    render() {\r\n        return (<React.Fragment>\r\n            <div className=\"background\">\r\n                    \r\n      \r\n      \r\n    \r\n            \r\n                <div className=\"center\">\r\n                    \r\n                    <Titles in = {this.state.in}/>\r\n                    <Forms loadWeather={this.getweather} />\r\n                    \r\n                </div>    \r\n                    <Weather WeatherCompError = {this.state.error}\r\n                            WeatherCompCity = {this.state.city} \r\n                            WeatherCompCountry = {this.state.country}\r\n                            WeatherCompTemp = {this.state.temperature}\r\n                            WeatherCompDesc = {this.state.Desc}\r\n                            WeatherCompIcon = {this.state.Icon}\r\n                            WeatherFiveDay = {this.state.FiveDayResultsList}\r\n                            in = {this.state.in}\r\n                        />\r\n                </div>\r\n                <div id=\"map\" className=\"center\">\r\n                    <MapContainer \r\n\r\n                            Weatherlat = {this.state.lat}\r\n                            Weatherlon = {this.state.lon}\r\n                            zoom = {10}\r\n                    />\r\n                \r\n                </div>\r\n                <Circle \r\n                       animation=\"slide-down\"\r\n                       time={1500}\r\n                       color=\"#FFFAF0\"\r\n                       background= \"radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)\"\r\n                />\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\nexport default App;"]},"metadata":{},"sourceType":"module"}