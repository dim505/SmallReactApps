{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\src\\\\App.js\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport React from 'react';\nimport Titles from './components/title';\nimport Forms from './components/forms';\nimport Weather from './components/weather';\nimport MapContainer from './components/googlemap';\nimport ReactDOM from 'react-dom';\nimport { Sugar } from 'react-preloaders';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getweather = async function fetchAsync(e) {\n      e.preventDefault();\n      const city = e.target.city.value;\n      const country = e.target.country.value;\n      const URL = 'https://api.openweathermap.org/data/2.5/weather?q=' + city + ',' + country + '&APPID=14b174dcab9bf47b49468e07daa1ff87'; // await response of fetch call\n\n      const response = await fetch(URL);\n      const results = await response.json();\n\n      if (city && country && response.status !== 404) {\n        const temp = Number(((results.main.temp - 273.15) * 9 / 5 + 32).toFixed(2));\n        var IconUrl = \"https://openweathermap.org/img/wn/\" + results.weather[0].icon + \"@2x.png\";\n        this.setState({\n          error: \"\",\n          temperature: temp,\n          city: results.name,\n          country: results.sys.country,\n          lat: results.coord.lat,\n          lon: results.coord.lon,\n          Desc: results.weather[0].description,\n          Icon: IconUrl\n        });\n      } else {\n        const ErrMsg = 'Opps!! Something went wrong. Please ensure both fields are filled out and are valid entities';\n        await this.setState({\n          error: ErrMsg,\n          temperature: \"\",\n          city: \"\",\n          country: \"\",\n          lat: \"\",\n          lon: \"\",\n          Desc: \"\",\n          Icon: \"\"\n        });\n      }\n    };\n\n    this.getweather = this.getweather.bind(this);\n    this.state = {\n      error: undefined,\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      lat: undefined,\n      lon: undefined,\n      Desc: undefined,\n      Icon: undefined\n    };\n  } // async function\n\n\n  componentDidMount() {\n    console.log(\"loaded\"); // Get the components DOM node\n\n    const elem = ReactDOM.findDOMNode(this); // Set the opacity of the element to 0\n\n    elem.style.opacity = 0; //alert(\"test\");\n\n    setTimeout(() => {\n      // Now set a transition on the opacity\n      elem.style.transition = \"opacity 2000ms\"; // and set the opacity to 1\n\n      elem.style.opacity = 1;\n    }, 500);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"background\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Titles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(Forms, {\n      loadWeather: this.getweather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(Weather, {\n      WeatherCompError: this.state.error,\n      WeatherCompCity: this.state.city,\n      WeatherCompCountry: this.state.country,\n      WeatherCompTemp: this.state.temperature,\n      WeatherCompDesc: this.state.Desc,\n      WeatherCompIcon: this.state.Icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"map\",\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(MapContainer, {\n      Weatherlat: this.state.lat,\n      Weatherlon: this.state.lon,\n      zoom: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }))), React.createElement(Sugar, {\n      color: \"\\t#FFFAF0\",\n      background: \"rgb(63,94,251)\",\n      background: \"radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\bob\\Documents\\Visual Studio 2015\\Projects\\my-app\\src\\App.js"],"names":["React","Titles","Forms","Weather","MapContainer","ReactDOM","Sugar","App","Component","constructor","props","getweather","fetchAsync","e","preventDefault","city","target","value","country","URL","response","fetch","results","json","status","temp","Number","main","toFixed","IconUrl","weather","icon","setState","error","temperature","name","sys","lat","coord","lon","Desc","description","Icon","ErrMsg","bind","state","undefined","componentDidMount","console","log","elem","findDOMNode","style","opacity","setTimeout","transition","render"],"mappings":"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","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css'\r\nimport React from 'react';\r\nimport Titles from './components/title'\r\nimport Forms from './components/forms'\r\nimport Weather from './components/weather'\r\nimport MapContainer from './components/googlemap'\r\nimport ReactDOM from 'react-dom';\r\nimport {Sugar} from 'react-preloaders';\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.getweather = this.getweather.bind(this)\r\n        this.state = {\r\n                 error: undefined,\r\n                 temperature: undefined,\r\n                 city: undefined,\r\n                 country: undefined,\r\n                 lat : undefined,\r\n                 lon: undefined,\r\n                 Desc : undefined,\r\n                 Icon : undefined\r\n\r\n        } \r\n\r\n\r\n\r\n\r\n    }\r\n\r\n      \r\n\r\n\r\n// async function\r\n    getweather = async function fetchAsync(e) {\r\n \r\n    \r\n\r\n        e.preventDefault();\r\n\r\n    const city = e.target.city.value\r\n    const country = e.target.country.value\r\n    const URL = 'https://api.openweathermap.org/data/2.5/weather?q=' + city + ',' + country + '&APPID=14b174dcab9bf47b49468e07daa1ff87'\r\n    // await response of fetch call\r\n    const response = await fetch(URL);\r\n    const results = await response.json(); \r\n    \r\n\r\n    \r\n    if(city && country && response.status !== 404){\r\n       \r\n    const temp = Number(( (((results.main.temp - 273.15) * 9)/5) + 32).toFixed(2))\r\n    \r\n\r\n    var IconUrl = \"https://openweathermap.org/img/wn/\" + results.weather[0].icon + \"@2x.png\"    \r\n\r\n\r\n    this.setState ({\r\n    error: \"\",\r\n    temperature: temp,\r\n    city: results.name,\r\n    country: results.sys.country,\r\n    lat: results.coord.lat,\r\n    lon: results.coord.lon,\r\n    Desc : results.weather[0].description,\r\n    Icon : IconUrl\r\n    })\r\n\r\n\r\n\r\n} else {     \r\n    \r\n    \r\n    const ErrMsg = 'Opps!! Something went wrong. Please ensure both fields are filled out and are valid entities'\r\n    await this.setState({\r\n    error: ErrMsg,\r\n    temperature: \"\",\r\n    city: \"\",\r\n    country: \"\",\r\n    lat: \"\",\r\n    lon: \"\",\r\n    Desc : \"\",\r\n    Icon : \"\"\r\n\r\n})} \r\n    \r\n   \r\n    \r\n \r\n}\r\n\r\n\r\ncomponentDidMount () {\r\n\r\n    console.log(\"loaded\")\r\n    // Get the components DOM node\r\n     const elem = ReactDOM.findDOMNode(this);\r\n    // Set the opacity of the element to 0\r\n    elem.style.opacity = 0;\r\n    //alert(\"test\");\r\n    setTimeout(() => {\r\n        // Now set a transition on the opacity\r\n        elem.style.transition = \"opacity 2000ms\";\r\n        // and set the opacity to 1\r\n    elem.style.opacity = 1;\r\n    }, 500);\r\n\r\n\r\n}\r\n    render() {\r\n        return (<React.Fragment>\r\n            <div className=\"background\">\r\n                    \r\n      \r\n      \r\n    \r\n            \r\n                <div className=\"center\">\r\n                    \r\n                    <Titles />\r\n                    <Forms loadWeather={this.getweather} />\r\n                    <Weather WeatherCompError = {this.state.error}\r\n                            WeatherCompCity = {this.state.city} \r\n                            WeatherCompCountry = {this.state.country}\r\n                            WeatherCompTemp = {this.state.temperature}\r\n                            WeatherCompDesc = {this.state.Desc}\r\n                            WeatherCompIcon = {this.state.Icon}\r\n                        />\r\n                </div>\r\n                <div id=\"map\" className=\"center\">\r\n                    <MapContainer \r\n\r\n                            Weatherlat = {this.state.lat}\r\n                            Weatherlon = {this.state.lon}\r\n                            zoom = {10}\r\n                    />\r\n                </div>\r\n                </div>\r\n                <Sugar color=\"\t#FFFAF0\"\r\n                       background= \"rgb(63,94,251)\"\r\n                       background= \"radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)\"\r\n                />\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\nexport default App;"]},"metadata":{},"sourceType":"module"}