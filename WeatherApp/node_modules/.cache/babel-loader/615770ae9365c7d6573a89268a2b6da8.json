{"ast":null,"code":"var _jsxFileName = \"C:\\\\scratch\\\\projects\\\\SmallReactApps\\\\WeatherApp\\\\src\\\\App.js\";\n//imports all the CSS files, weather components, and 3rd party add ons\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport React from \"react\";\nimport Titles from \"./components/title\";\nimport Forms from \"./components/forms\";\nimport Weather from \"./components/weather\";\nimport MapContainer from \"./components/googlemap\";\nimport ReactDOM from \"react-dom\";\nimport { Circle } from \"react-preloaders\";\nimport LoadingBar from \"react-top-loading-bar\";\nconst tourConfig = [{\n  selector: '[data-tut=\"reactour__Start\"]',\n  content: \"Welcome to my Weather App. Please click allow \\n          for Geolocation and read the warning banner\"\n}, {\n  selector: '[data-tut=\"reactour__City\"]',\n  content: \"Please enter the city\"\n}, {\n  selector: '[data-tut=\"reactour_CountryCode\"]',\n  content: \"Please enter the country code. (CA for canada\\n              and US for USA)\"\n}, {\n  selector: '[data-tut=\"reactour__Submit\"]',\n  content: \"Now Click Submit!\"\n}, {\n  selector: '[data-tut=\"reactour__CurrentWeather\"]',\n  content: \"This provides just the current weather at the moment \"\n}, {\n  selector: '[data-tut=\"reactour__5DayWeather\"]',\n  content: \"This Gives the 5 day weather in 3 hour increments \"\n}, {\n  selector: '[data-tut=\"reactour__GoogleMaps\"]',\n  content: \"This maps give you an approxmination of the current weather data point \"\n}];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); //binds getweather so it can modify state\n\n    this.add = value => {\n      this.setState({\n        loadingBarProgress: this.state.loadingBarProgress + value\n      });\n    };\n\n    this.complete = () => {\n      this.setState({\n        loadingBarProgress: 100\n      });\n    };\n\n    this.onLoaderFinished = () => {\n      this.setState({\n        loadingBarProgress: 0\n      });\n    };\n\n    this.getweather = async function fetchAsync(e) {\n      this.add(10); //prevent page refresh when page content is updated\n\n      e.preventDefault(); //gets city name from input box\n\n      const city = e.target.city.value; //gets iso code from input box\n\n      const country = e.target.country.value; //formualtes URL\n\n      this.add(20);\n      const URL = \"https://api.openweathermap.org/data/2.5/weather?q=\" + city + \",\" + country + \"&APPID=14b174dcab9bf47b49468e07daa1ff87\";\n      const fiveDayUrl = \"https://api.openweathermap.org/data/2.5/forecast?q=\" + city + \",\" + country + \"&APPID=14b174dcab9bf47b49468e07daa1ff87\"; // await response of fetch call\n\n      const response = await fetch(URL);\n      const FiveDayResponse = await fetch(fiveDayUrl);\n      this.add(33); //converts responds to json\n\n      const results = await response.json();\n      const FiveDayResults = await FiveDayResponse.json(); //checks if city and country are not blank and the returned response is not an error\n\n      if (city && country && response.status !== 404) {\n        //converts temp form K to F\n        const temp = Number(((results.main.temp - 273.15) * 9 / 5 + 32).toFixed(2)); //gets the appropriate icon for the weather\n\n        var IconUrl = \"https://openweathermap.org/img/wn/\" + results.weather[0].icon + \"@2x.png\"; //sets the state to be passed on to the compoents below\n\n        this.setState({\n          error: \"\",\n          temperature: temp,\n          city: results.name,\n          country: results.sys.country,\n          lat: results.coord.lat,\n          lon: results.coord.lon,\n          Desc: results.weather[0].description,\n          Icon: IconUrl,\n          FiveDayResultsList: FiveDayResults.list\n        });\n        this.complete();\n      } else {\n        //CLEARS OUT ALL THE STATE\n        const ErrMsg = \"Opps!! Something went wrong. Please ensure both fields are filled out and are valid entities\";\n        await this.setState({\n          error: ErrMsg,\n          temperature: \"\",\n          city: \"\",\n          country: \"\",\n          lat: \"\",\n          lon: \"\",\n          Desc: \"\",\n          Icon: \"\",\n          FiveDayResultsList: []\n        });\n        this.complete();\n      }\n    };\n\n    this.GetIntiWeath = async function GetIntiWeath() {\n      //gets if geolocation is supported\n      if (navigator.geolocation) {\n        //gets geolocation\n        navigator.geolocation.getCurrentPosition(async position => {\n          //gets latitube\n          const lat = position.coords.latitude; //gets longitube\n\n          const lon = position.coords.longitude; //defines current weather url\n\n          const URL = \"https://api.openweathermap.org/data/2.5/weather?lat=\" + lat + \"&lon=\" + lon + \"&APPID=14b174dcab9bf47b49468e07daa1ff87\"; //defines 5 day hourly URL\n\n          const fiveDayUrl = \"https://api.openweathermap.org/data/2.5/forecast?lat=\" + lat + \"&lon=\" + lon + \"&APPID=14b174dcab9bf47b49468e07daa1ff87\";\n          this.add(30); //Gets the results\n\n          const response = await fetch(URL);\n          const FiveDayResponse = await fetch(fiveDayUrl);\n          const results = await response.json();\n          const FiveDayResults = await FiveDayResponse.json();\n          this.add(30); //converts from K to F\n\n          const temp = Number(((results.main.temp - 273.15) * 9 / 5 + 32).toFixed(2));\n          var IconUrl = \"https://openweathermap.org/img/wn/\" + results.weather[0].icon + \"@2x.png\"; //sets state to be passed down to weather comp\n\n          this.setState({\n            error: \"\",\n            temperature: temp,\n            city: results.name,\n            country: results.sys.country,\n            lat: position.coords.latitude,\n            lon: position.coords.longitude,\n            Desc: results.weather[0].description,\n            Icon: IconUrl,\n            FiveDayResultsList: FiveDayResults.list\n          });\n          this.complete();\n        });\n      } else {\n        //serts\n        alert(\"Geolocation is not supported by this browser.\");\n      }\n    };\n\n    this.getweather = this.getweather.bind(this);\n    this.GetIntiWeath = this.GetIntiWeath.bind(this); //setting state of component\n\n    this.state = {\n      error: undefined,\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      lat: undefined,\n      lon: undefined,\n      Desc: undefined,\n      Icon: undefined,\n      in: true,\n      FiveDayResultsList: [],\n      loadingBarProgress: 0\n    };\n  }\n\n  componentDidMount() {\n    // Get the components DOM node\n    const elem = ReactDOM.findDOMNode(this); // Set the opacity of the element to 0\n\n    elem.style.opacity = 0; //fades in after preloader loads\n\n    setTimeout(() => {\n      // Now set a transition on the opacity\n      elem.style.transition = \"opacity 2000ms\"; // and set the opacity to 1\n\n      elem.style.opacity = 1;\n    }, 3000); //calls function to load intial weather\n\n    this.GetIntiWeath(); //sets tab name\n\n    document.title = \"Weather App\";\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"background\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(LoadingBar, {\n      progress: this.state.loadingBarProgress,\n      height: 6,\n      color: \"#0000A0\",\n      onLoaderFinished: () => this.onLoaderFinished(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), React.createElement(Titles, {\n      in: this.state.in,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(Forms, {\n      loadWeather: this.getweather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    })), React.createElement(Weather, {\n      WeatherCompError: this.state.error,\n      WeatherCompCity: this.state.city,\n      WeatherCompCountry: this.state.country,\n      WeatherCompTemp: this.state.temperature,\n      WeatherCompDesc: this.state.Desc,\n      WeatherCompIcon: this.state.Icon,\n      WeatherFiveDay: this.state.FiveDayResultsList,\n      in: this.state.in,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"map\",\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(MapContainer, {\n      Weatherlat: this.state.lat,\n      Weatherlon: this.state.lon,\n      zoom: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    })), React.createElement(Circle, {\n      animation: \"slide-down\",\n      time: 1500,\n      color: \"#FFFAF0\",\n      background: \"radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\scratch\\projects\\SmallReactApps\\WeatherApp\\src\\App.js"],"names":["React","Titles","Forms","Weather","MapContainer","ReactDOM","Circle","LoadingBar","tourConfig","selector","content","App","Component","constructor","props","add","value","setState","loadingBarProgress","state","complete","onLoaderFinished","getweather","fetchAsync","e","preventDefault","city","target","country","URL","fiveDayUrl","response","fetch","FiveDayResponse","results","json","FiveDayResults","status","temp","Number","main","toFixed","IconUrl","weather","icon","error","temperature","name","sys","lat","coord","lon","Desc","description","Icon","FiveDayResultsList","list","ErrMsg","GetIntiWeath","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","alert","bind","undefined","in","componentDidMount","elem","findDOMNode","style","opacity","setTimeout","transition","document","title","render"],"mappings":";AAAA;AACA,OAAO,sCAAP;AACA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA,MAAMC,UAAU,GAAG,CACjB;AACEC,EAAAA,QAAQ,EAAE,8BADZ;AAEEC,EAAAA,OAAO;AAFT,CADiB,EAMjB;AACED,EAAAA,QAAQ,EAAE,6BADZ;AAEEC,EAAAA,OAAO;AAFT,CANiB,EAUjB;AACED,EAAAA,QAAQ,EAAE,mCADZ;AAEEC,EAAAA,OAAO;AAFT,CAViB,EAejB;AACED,EAAAA,QAAQ,EAAE,+BADZ;AAEEC,EAAAA,OAAO;AAFT,CAfiB,EAmBjB;AACED,EAAAA,QAAQ,EAAE,uCADZ;AAEEC,EAAAA,OAAO;AAFT,CAnBiB,EAuBjB;AACED,EAAAA,QAAQ,EAAE,oCADZ;AAEEC,EAAAA,OAAO;AAFT,CAvBiB,EA2BjB;AACED,EAAAA,QAAQ,EAAE,mCADZ;AAEEC,EAAAA,OAAO;AAFT,CA3BiB,CAAnB;;AAiCA,MAAMC,GAAN,SAAkBX,KAAK,CAACY,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AAHiB,SAsBnBC,GAtBmB,GAsBZC,KAAD,IAAW;AACf,WAAKC,QAAL,CAAc;AACZC,QAAAA,kBAAkB,EAAE,KAAKC,KAAL,CAAWD,kBAAX,GAAgCF;AADxC,OAAd;AAGD,KA1BkB;;AAAA,SA4BnBI,QA5BmB,GA4BR,MAAM;AACf,WAAKH,QAAL,CAAc;AAAEC,QAAAA,kBAAkB,EAAE;AAAtB,OAAd;AACD,KA9BkB;;AAAA,SAgCnBG,gBAhCmB,GAgCA,MAAM;AACvB,WAAKJ,QAAL,CAAc;AAAEC,QAAAA,kBAAkB,EAAE;AAAtB,OAAd;AACD,KAlCkB;;AAAA,SAoCnBI,UApCmB,GAoCN,eAAeC,UAAf,CAA0BC,CAA1B,EAA6B;AACxC,WAAKT,GAAL,CAAS,EAAT,EADwC,CAExC;;AACAS,MAAAA,CAAC,CAACC,cAAF,GAHwC,CAIxC;;AACA,YAAMC,IAAI,GAAGF,CAAC,CAACG,MAAF,CAASD,IAAT,CAAcV,KAA3B,CALwC,CAMxC;;AACA,YAAMY,OAAO,GAAGJ,CAAC,CAACG,MAAF,CAASC,OAAT,CAAiBZ,KAAjC,CAPwC,CAQxC;;AACA,WAAKD,GAAL,CAAS,EAAT;AACA,YAAMc,GAAG,GACP,uDACAH,IADA,GAEA,GAFA,GAGAE,OAHA,GAIA,yCALF;AAMA,YAAME,UAAU,GACd,wDACAJ,IADA,GAEA,GAFA,GAGAE,OAHA,GAIA,yCALF,CAhBwC,CAsBxC;;AACA,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,CAA5B;AACA,YAAMI,eAAe,GAAG,MAAMD,KAAK,CAACF,UAAD,CAAnC;AACA,WAAKf,GAAL,CAAS,EAAT,EAzBwC,CA2BxC;;AACA,YAAMmB,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;AACA,YAAMC,cAAc,GAAG,MAAMH,eAAe,CAACE,IAAhB,EAA7B,CA7BwC,CA+BxC;;AACA,UAAIT,IAAI,IAAIE,OAAR,IAAmBG,QAAQ,CAACM,MAAT,KAAoB,GAA3C,EAAgD;AAC9C;AACA,cAAMC,IAAI,GAAGC,MAAM,CACjB,CAAE,CAACL,OAAO,CAACM,IAAR,CAAaF,IAAb,GAAoB,MAArB,IAA+B,CAAhC,GAAqC,CAArC,GAAyC,EAA1C,EAA8CG,OAA9C,CAAsD,CAAtD,CADiB,CAAnB,CAF8C,CAM9C;;AACA,YAAIC,OAAO,GACT,uCACAR,OAAO,CAACS,OAAR,CAAgB,CAAhB,EAAmBC,IADnB,GAEA,SAHF,CAP8C,CAY9C;;AACA,aAAK3B,QAAL,CAAc;AACZ4B,UAAAA,KAAK,EAAE,EADK;AAEZC,UAAAA,WAAW,EAAER,IAFD;AAGZZ,UAAAA,IAAI,EAAEQ,OAAO,CAACa,IAHF;AAIZnB,UAAAA,OAAO,EAAEM,OAAO,CAACc,GAAR,CAAYpB,OAJT;AAKZqB,UAAAA,GAAG,EAAEf,OAAO,CAACgB,KAAR,CAAcD,GALP;AAMZE,UAAAA,GAAG,EAAEjB,OAAO,CAACgB,KAAR,CAAcC,GANP;AAOZC,UAAAA,IAAI,EAAElB,OAAO,CAACS,OAAR,CAAgB,CAAhB,EAAmBU,WAPb;AAQZC,UAAAA,IAAI,EAAEZ,OARM;AASZa,UAAAA,kBAAkB,EAAEnB,cAAc,CAACoB;AATvB,SAAd;AAYA,aAAKpC,QAAL;AACD,OA1BD,MA0BO;AACL;AACA,cAAMqC,MAAM,GACV,8FADF;AAEA,cAAM,KAAKxC,QAAL,CAAc;AAClB4B,UAAAA,KAAK,EAAEY,MADW;AAElBX,UAAAA,WAAW,EAAE,EAFK;AAGlBpB,UAAAA,IAAI,EAAE,EAHY;AAIlBE,UAAAA,OAAO,EAAE,EAJS;AAKlBqB,UAAAA,GAAG,EAAE,EALa;AAMlBE,UAAAA,GAAG,EAAE,EANa;AAOlBC,UAAAA,IAAI,EAAE,EAPY;AAQlBE,UAAAA,IAAI,EAAE,EARY;AASlBC,UAAAA,kBAAkB,EAAE;AATF,SAAd,CAAN;AAWA,aAAKnC,QAAL;AACD;AACF,KA/GkB;;AAAA,SAkHnBsC,YAlHmB,GAkHJ,eAAeA,YAAf,GAA8B;AAC3C;AACA,UAAIC,SAAS,CAACC,WAAd,EAA2B;AACzB;AACAD,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,MAAOC,QAAP,IAAoB;AAC3D;AACA,gBAAMb,GAAG,GAAGa,QAAQ,CAACC,MAAT,CAAgBC,QAA5B,CAF2D,CAG3D;;AACA,gBAAMb,GAAG,GAAGW,QAAQ,CAACC,MAAT,CAAgBE,SAA5B,CAJ2D,CAM3D;;AACA,gBAAMpC,GAAG,GACP,yDACAoB,GADA,GAEA,OAFA,GAGAE,GAHA,GAIA,yCALF,CAP2D,CAa3D;;AACA,gBAAMrB,UAAU,GACd,0DACAmB,GADA,GAEA,OAFA,GAGAE,GAHA,GAIA,yCALF;AAMA,eAAKpC,GAAL,CAAS,EAAT,EApB2D,CAqB3D;;AACA,gBAAMgB,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,CAA5B;AACA,gBAAMI,eAAe,GAAG,MAAMD,KAAK,CAACF,UAAD,CAAnC;AACA,gBAAMI,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;AACA,gBAAMC,cAAc,GAAG,MAAMH,eAAe,CAACE,IAAhB,EAA7B;AACA,eAAKpB,GAAL,CAAS,EAAT,EA1B2D,CA2B3D;;AACA,gBAAMuB,IAAI,GAAGC,MAAM,CACjB,CAAE,CAACL,OAAO,CAACM,IAAR,CAAaF,IAAb,GAAoB,MAArB,IAA+B,CAAhC,GAAqC,CAArC,GAAyC,EAA1C,EAA8CG,OAA9C,CAAsD,CAAtD,CADiB,CAAnB;AAIA,cAAIC,OAAO,GACT,uCACAR,OAAO,CAACS,OAAR,CAAgB,CAAhB,EAAmBC,IADnB,GAEA,SAHF,CAhC2D,CAqC3D;;AACA,eAAK3B,QAAL,CAAc;AACZ4B,YAAAA,KAAK,EAAE,EADK;AAEZC,YAAAA,WAAW,EAAER,IAFD;AAGZZ,YAAAA,IAAI,EAAEQ,OAAO,CAACa,IAHF;AAIZnB,YAAAA,OAAO,EAAEM,OAAO,CAACc,GAAR,CAAYpB,OAJT;AAKZqB,YAAAA,GAAG,EAAEa,QAAQ,CAACC,MAAT,CAAgBC,QALT;AAMZb,YAAAA,GAAG,EAAEW,QAAQ,CAACC,MAAT,CAAgBE,SANT;AAOZb,YAAAA,IAAI,EAAElB,OAAO,CAACS,OAAR,CAAgB,CAAhB,EAAmBU,WAPb;AAQZC,YAAAA,IAAI,EAAEZ,OARM;AASZa,YAAAA,kBAAkB,EAAEnB,cAAc,CAACoB;AATvB,WAAd;AAYA,eAAKpC,QAAL;AACD,SAnDD;AAoDD,OAtDD,MAsDO;AACL;AACA8C,QAAAA,KAAK,CAAC,+CAAD,CAAL;AACD;AACF,KA9KkB;;AAIjB,SAAK5C,UAAL,GAAkB,KAAKA,UAAL,CAAgB6C,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKT,YAAL,GAAoB,KAAKA,YAAL,CAAkBS,IAAlB,CAAuB,IAAvB,CAApB,CALiB,CAMjB;;AACA,SAAKhD,KAAL,GAAa;AACX0B,MAAAA,KAAK,EAAEuB,SADI;AAEXtB,MAAAA,WAAW,EAAEsB,SAFF;AAGX1C,MAAAA,IAAI,EAAE0C,SAHK;AAIXxC,MAAAA,OAAO,EAAEwC,SAJE;AAKXnB,MAAAA,GAAG,EAAEmB,SALM;AAMXjB,MAAAA,GAAG,EAAEiB,SANM;AAOXhB,MAAAA,IAAI,EAAEgB,SAPK;AAQXd,MAAAA,IAAI,EAAEc,SARK;AASXC,MAAAA,EAAE,EAAE,IATO;AAUXd,MAAAA,kBAAkB,EAAE,EAVT;AAWXrC,MAAAA,kBAAkB,EAAE;AAXT,KAAb;AAaD;;AA4JDoD,EAAAA,iBAAiB,GAAG;AAClB;AACA,UAAMC,IAAI,GAAGlE,QAAQ,CAACmE,WAAT,CAAqB,IAArB,CAAb,CAFkB,CAGlB;;AACAD,IAAAA,IAAI,CAACE,KAAL,CAAWC,OAAX,GAAqB,CAArB,CAJkB,CAKlB;;AACAC,IAAAA,UAAU,CAAC,MAAM;AACf;AACAJ,MAAAA,IAAI,CAACE,KAAL,CAAWG,UAAX,GAAwB,gBAAxB,CAFe,CAGf;;AACAL,MAAAA,IAAI,CAACE,KAAL,CAAWC,OAAX,GAAqB,CAArB;AACD,KALS,EAKP,IALO,CAAV,CANkB,CAYlB;;AACA,SAAKhB,YAAL,GAbkB,CAclB;;AACAmB,IAAAA,QAAQ,CAACC,KAAT,GAAiB,aAAjB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AACE,MAAA,QAAQ,EAAE,KAAK5D,KAAL,CAAWD,kBADvB;AAEE,MAAA,MAAM,EAAE,CAFV;AAGE,MAAA,KAAK,EAAC,SAHR;AAIE,MAAA,gBAAgB,EAAE,MAAM,KAAKG,gBAAL,EAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAOE,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAE,KAAKF,KAAL,CAAWkD,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAQE,oBAAC,KAAD;AAAO,MAAA,WAAW,EAAE,KAAK/C,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF,EAWE,oBAAC,OAAD;AACE,MAAA,gBAAgB,EAAE,KAAKH,KAAL,CAAW0B,KAD/B;AAEE,MAAA,eAAe,EAAE,KAAK1B,KAAL,CAAWO,IAF9B;AAGE,MAAA,kBAAkB,EAAE,KAAKP,KAAL,CAAWS,OAHjC;AAIE,MAAA,eAAe,EAAE,KAAKT,KAAL,CAAW2B,WAJ9B;AAKE,MAAA,eAAe,EAAE,KAAK3B,KAAL,CAAWiC,IAL9B;AAME,MAAA,eAAe,EAAE,KAAKjC,KAAL,CAAWmC,IAN9B;AAOE,MAAA,cAAc,EAAE,KAAKnC,KAAL,CAAWoC,kBAP7B;AAQE,MAAA,EAAE,EAAE,KAAKpC,KAAL,CAAWkD,EARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADF,EAuBE;AAAK,MAAA,EAAE,EAAC,KAAR;AAAc,MAAA,SAAS,EAAC,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AACE,MAAA,UAAU,EAAE,KAAKlD,KAAL,CAAW8B,GADzB;AAEE,MAAA,UAAU,EAAE,KAAK9B,KAAL,CAAWgC,GAFzB;AAGE,MAAA,IAAI,EAAE,EAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAvBF,EA+BE,oBAAC,MAAD;AACE,MAAA,SAAS,EAAC,YADZ;AAEE,MAAA,IAAI,EAAE,IAFR;AAGE,MAAA,KAAK,EAAC,SAHR;AAIE,MAAA,UAAU,EAAC,wEAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/BF,CADF;AAwCD;;AA5O+B;;AA8OlC,eAAexC,GAAf","sourcesContent":["//imports all the CSS files, weather components, and 3rd party add ons\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport React from \"react\";\r\nimport Titles from \"./components/title\";\r\nimport Forms from \"./components/forms\";\r\nimport Weather from \"./components/weather\";\r\nimport MapContainer from \"./components/googlemap\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Circle } from \"react-preloaders\";\r\nimport LoadingBar from \"react-top-loading-bar\";\r\n\r\nconst tourConfig = [\r\n  {\r\n    selector: '[data-tut=\"reactour__Start\"]',\r\n    content: `Welcome to my Weather App. Please click allow \r\n          for Geolocation and read the warning banner`,\r\n  },\r\n  {\r\n    selector: '[data-tut=\"reactour__City\"]',\r\n    content: `Please enter the city`,\r\n  },\r\n  {\r\n    selector: '[data-tut=\"reactour_CountryCode\"]',\r\n    content: `Please enter the country code. (CA for canada\r\n              and US for USA)`,\r\n  },\r\n  {\r\n    selector: '[data-tut=\"reactour__Submit\"]',\r\n    content: `Now Click Submit!`,\r\n  },\r\n  {\r\n    selector: '[data-tut=\"reactour__CurrentWeather\"]',\r\n    content: `This provides just the current weather at the moment `,\r\n  },\r\n  {\r\n    selector: '[data-tut=\"reactour__5DayWeather\"]',\r\n    content: `This Gives the 5 day weather in 3 hour increments `,\r\n  },\r\n  {\r\n    selector: '[data-tut=\"reactour__GoogleMaps\"]',\r\n    content: `This maps give you an approxmination of the current weather data point `,\r\n  },\r\n];\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //binds getweather so it can modify state\r\n    this.getweather = this.getweather.bind(this);\r\n    this.GetIntiWeath = this.GetIntiWeath.bind(this);\r\n    //setting state of component\r\n    this.state = {\r\n      error: undefined,\r\n      temperature: undefined,\r\n      city: undefined,\r\n      country: undefined,\r\n      lat: undefined,\r\n      lon: undefined,\r\n      Desc: undefined,\r\n      Icon: undefined,\r\n      in: true,\r\n      FiveDayResultsList: [],\r\n      loadingBarProgress: 0,\r\n    };\r\n  }\r\n\r\n  add = (value) => {\r\n    this.setState({\r\n      loadingBarProgress: this.state.loadingBarProgress + value,\r\n    });\r\n  };\r\n\r\n  complete = () => {\r\n    this.setState({ loadingBarProgress: 100 });\r\n  };\r\n\r\n  onLoaderFinished = () => {\r\n    this.setState({ loadingBarProgress: 0 });\r\n  };\r\n  // async function\r\n  getweather = async function fetchAsync(e) {\r\n    this.add(10);\r\n    //prevent page refresh when page content is updated\r\n    e.preventDefault();\r\n    //gets city name from input box\r\n    const city = e.target.city.value;\r\n    //gets iso code from input box\r\n    const country = e.target.country.value;\r\n    //formualtes URL\r\n    this.add(20);\r\n    const URL =\r\n      \"https://api.openweathermap.org/data/2.5/weather?q=\" +\r\n      city +\r\n      \",\" +\r\n      country +\r\n      \"&APPID=14b174dcab9bf47b49468e07daa1ff87\";\r\n    const fiveDayUrl =\r\n      \"https://api.openweathermap.org/data/2.5/forecast?q=\" +\r\n      city +\r\n      \",\" +\r\n      country +\r\n      \"&APPID=14b174dcab9bf47b49468e07daa1ff87\";\r\n    // await response of fetch call\r\n    const response = await fetch(URL);\r\n    const FiveDayResponse = await fetch(fiveDayUrl);\r\n    this.add(33);\r\n\r\n    //converts responds to json\r\n    const results = await response.json();\r\n    const FiveDayResults = await FiveDayResponse.json();\r\n\r\n    //checks if city and country are not blank and the returned response is not an error\r\n    if (city && country && response.status !== 404) {\r\n      //converts temp form K to F\r\n      const temp = Number(\r\n        (((results.main.temp - 273.15) * 9) / 5 + 32).toFixed(2)\r\n      );\r\n\r\n      //gets the appropriate icon for the weather\r\n      var IconUrl =\r\n        \"https://openweathermap.org/img/wn/\" +\r\n        results.weather[0].icon +\r\n        \"@2x.png\";\r\n\r\n      //sets the state to be passed on to the compoents below\r\n      this.setState({\r\n        error: \"\",\r\n        temperature: temp,\r\n        city: results.name,\r\n        country: results.sys.country,\r\n        lat: results.coord.lat,\r\n        lon: results.coord.lon,\r\n        Desc: results.weather[0].description,\r\n        Icon: IconUrl,\r\n        FiveDayResultsList: FiveDayResults.list,\r\n      });\r\n\r\n      this.complete();\r\n    } else {\r\n      //CLEARS OUT ALL THE STATE\r\n      const ErrMsg =\r\n        \"Opps!! Something went wrong. Please ensure both fields are filled out and are valid entities\";\r\n      await this.setState({\r\n        error: ErrMsg,\r\n        temperature: \"\",\r\n        city: \"\",\r\n        country: \"\",\r\n        lat: \"\",\r\n        lon: \"\",\r\n        Desc: \"\",\r\n        Icon: \"\",\r\n        FiveDayResultsList: [],\r\n      });\r\n      this.complete();\r\n    }\r\n  };\r\n\r\n  //gets the inital weather from geolocation\r\n  GetIntiWeath = async function GetIntiWeath() {\r\n    //gets if geolocation is supported\r\n    if (navigator.geolocation) {\r\n      //gets geolocation\r\n      navigator.geolocation.getCurrentPosition(async (position) => {\r\n        //gets latitube\r\n        const lat = position.coords.latitude;\r\n        //gets longitube\r\n        const lon = position.coords.longitude;\r\n\r\n        //defines current weather url\r\n        const URL =\r\n          \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\r\n          lat +\r\n          \"&lon=\" +\r\n          lon +\r\n          \"&APPID=14b174dcab9bf47b49468e07daa1ff87\";\r\n        //defines 5 day hourly URL\r\n        const fiveDayUrl =\r\n          \"https://api.openweathermap.org/data/2.5/forecast?lat=\" +\r\n          lat +\r\n          \"&lon=\" +\r\n          lon +\r\n          \"&APPID=14b174dcab9bf47b49468e07daa1ff87\";\r\n        this.add(30);\r\n        //Gets the results\r\n        const response = await fetch(URL);\r\n        const FiveDayResponse = await fetch(fiveDayUrl);\r\n        const results = await response.json();\r\n        const FiveDayResults = await FiveDayResponse.json();\r\n        this.add(30);\r\n        //converts from K to F\r\n        const temp = Number(\r\n          (((results.main.temp - 273.15) * 9) / 5 + 32).toFixed(2)\r\n        );\r\n\r\n        var IconUrl =\r\n          \"https://openweathermap.org/img/wn/\" +\r\n          results.weather[0].icon +\r\n          \"@2x.png\";\r\n\r\n        //sets state to be passed down to weather comp\r\n        this.setState({\r\n          error: \"\",\r\n          temperature: temp,\r\n          city: results.name,\r\n          country: results.sys.country,\r\n          lat: position.coords.latitude,\r\n          lon: position.coords.longitude,\r\n          Desc: results.weather[0].description,\r\n          Icon: IconUrl,\r\n          FiveDayResultsList: FiveDayResults.list,\r\n        });\r\n\r\n        this.complete();\r\n      });\r\n    } else {\r\n      //serts\r\n      alert(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Get the components DOM node\r\n    const elem = ReactDOM.findDOMNode(this);\r\n    // Set the opacity of the element to 0\r\n    elem.style.opacity = 0;\r\n    //fades in after preloader loads\r\n    setTimeout(() => {\r\n      // Now set a transition on the opacity\r\n      elem.style.transition = \"opacity 2000ms\";\r\n      // and set the opacity to 1\r\n      elem.style.opacity = 1;\r\n    }, 3000);\r\n    //calls function to load intial weather\r\n    this.GetIntiWeath();\r\n    //sets tab name\r\n    document.title = \"Weather App\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"background\">\r\n          <div className=\"center\">\r\n            <LoadingBar\r\n              progress={this.state.loadingBarProgress}\r\n              height={6}\r\n              color=\"#0000A0\"\r\n              onLoaderFinished={() => this.onLoaderFinished()}\r\n            />\r\n            <Titles in={this.state.in} />\r\n            <Forms loadWeather={this.getweather} />\r\n          </div>\r\n          <Weather\r\n            WeatherCompError={this.state.error}\r\n            WeatherCompCity={this.state.city}\r\n            WeatherCompCountry={this.state.country}\r\n            WeatherCompTemp={this.state.temperature}\r\n            WeatherCompDesc={this.state.Desc}\r\n            WeatherCompIcon={this.state.Icon}\r\n            WeatherFiveDay={this.state.FiveDayResultsList}\r\n            in={this.state.in}\r\n          />\r\n        </div>\r\n        <div id=\"map\" className=\"center\">\r\n          <MapContainer\r\n            Weatherlat={this.state.lat}\r\n            Weatherlon={this.state.lon}\r\n            zoom={10}\r\n          />\r\n        </div>\r\n\r\n        <Circle\r\n          animation=\"slide-down\"\r\n          time={1500}\r\n          color=\"#FFFAF0\"\r\n          background=\"radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)\"\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}