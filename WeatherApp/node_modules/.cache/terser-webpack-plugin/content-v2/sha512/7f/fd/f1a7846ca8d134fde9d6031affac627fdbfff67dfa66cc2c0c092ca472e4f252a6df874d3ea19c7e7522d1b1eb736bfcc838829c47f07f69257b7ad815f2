{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\src\\\\serviceWorker.js\",\"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\src\\\\components\\\\title.js\",\"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\src\\\\components\\\\forms.js\",\"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\src\\\\components\\\\weather.js\",\"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\src\\\\App.js\",\"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\src\\\\index.js\"],\"names\":[\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"Titles\",\"react_default\",\"a\",\"createElement\",\"Forms\",\"props\",\"onSubmit\",\"loadWeather\",\"type\",\"name\",\"placeholder\",\"value\",\"Weather\",\"WeatherCompCity\",\"WeatherCompCountry\",\"WeatherCompTemp\",\"App\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"getweather\",\"_fetchAsync\",\"asyncToGenerator\",\"regenerator_default\",\"mark\",\"_callee\",\"e\",\"city\",\"country\",\"URL\",\"response\",\"results\",\"wrap\",\"_context\",\"prev\",\"next\",\"preventDefault\",\"target\",\"fetch\",\"sent\",\"json\",\"console\",\"log\",\"setState\",\"temperature\",\"main\",\"temp\",\"sys\",\"state\",\"stop\",\"_x\",\"apply\",\"arguments\",\"bind\",\"assertThisInitialized\",\"undefined\",\"React\",\"Component\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"\\r\\nimport React from 'react';\\r\\n\\r\\n\\r\\nexport default function Titles() {\\r\\n    return (\\r\\n        <div>\\r\\n            <h1>Welcome to My Weather App</h1>\\r\\n            <p> Please select the city and country to see the weather below </p>\\r\\n        </div>\\r\\n    )\\r\\n}\\r\\n\",\"import React from 'react';\\r\\n\\r\\n\\r\\nexport default function Forms (props)\\r\\n     {\\r\\n\\r\\n    \\r\\n    return (\\r\\n\\r\\n        <form onSubmit={props.loadWeather}>\\r\\n\\r\\n            <input type=\\\"text\\\" name=\\\"city\\\" placeholder=\\\"Input City Here\\\"/>\\r\\n            <input type=\\\"text\\\" name=\\\"country\\\" placeholder=\\\"Input Country Here\\\"/>\\r\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\"/> \\r\\n\\r\\n         </form>      \\r\\n            \\r\\n                )\\r\\n\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\",\"import React from 'react';\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nexport default function Weather(props)  {\\r\\n    \\r\\n\\r\\n        return ( <div>  \\r\\n                \\r\\n            \\r\\n                {props.WeatherCompCity && <p>City: {props.WeatherCompCity} </p>}\\r\\n                {props.WeatherCompCountry && <p>Country: {props.WeatherCompCountry} </p>}\\r\\n                {props.WeatherCompTemp && <p>Temp: {props.WeatherCompTemp} </p>}\\r\\n             \\r\\n\\r\\n                \\r\\n\\r\\n                \\r\\n                 </div>\\r\\n            \\r\\n            \\r\\n            \\r\\n        )\\r\\n        \\r\\n    \\r\\n\\r\\n}\\r\\n\\r\\n\",\"\\r\\nimport React from 'react';\\r\\nimport Titles from './components/title'\\r\\nimport Forms from './components/forms'\\r\\nimport Weather from './components/weather'\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nclass App extends React.Component {\\r\\n\\r\\n\\r\\n    constructor(props) {\\r\\n        super(props)\\r\\n        this.getweather = this.getweather.bind(this)\\r\\n        this.state = {\\r\\n                 temperature: undefined,\\r\\n                 city: undefined,\\r\\n                 country: undefined\\r\\n          \\r\\n\\r\\n        } \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    \\r\\n// async function\\r\\n    getweather = async function fetchAsync(e) {\\r\\n \\r\\n    \\r\\n\\r\\n        e.preventDefault();\\r\\n\\r\\n    const city = e.target.city.value\\r\\n    const country = e.target.country.value\\r\\n    const URL = 'http://api.openweathermap.org/data/2.5/weather?q=' + city + ',' + country + '&APPID=14b174dcab9bf47b49468e07daa1ff87'\\r\\n    // await response of fetch call\\r\\n    //const response = await fetch('http://api.openweathermap.org/data/2.5/weather?q=greenfield,usa&APPID=14b174dcab9bf47b49468e07daa1ff87')\\r\\n    const response = await fetch(URL);\\r\\n    // only proceed once promise is resolved\\r\\n    const results = await response.json(); \\r\\n    console.log(results);\\r\\n    \\r\\n\\r\\n   \\r\\n   await this.setState ({\\r\\n    temperature: results.main.temp,\\r\\n    city: results.name,\\r\\n    country: results.sys.country\\r\\n\\r\\n}); \\r\\n    console.log(this.state.city)\\r\\n    console.log(this.state.temperature)\\r\\n    \\r\\n \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n    render() {\\r\\n        return (\\r\\n            <div>\\r\\n                <Titles />\\r\\n                <Forms loadWeather={this.getweather} />\\r\\n                <Weather WeatherCompCity = {this.state.city} \\r\\n                         WeatherCompCountry = {this.state.country}\\r\\n                         WeatherCompTemp = {this.state.temperature}\\r\\n                       />\\r\\n\\r\\n\\r\\n            </div>\\r\\n        )\\r\\n    }\\r\\n}\\r\\nexport default App;\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport * as serviceWorker from './serviceWorker';\\nimport App from './App'\\n\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\nserviceWorker.unregister();\\n\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{11:function(e,t,n){e.exports=n(18)},18:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),o=n(4),c=n.n(o);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var u=n(2),i=n.n(u),l=n(5),m=n(6),s=n(7),p=n(9),h=n(8),y=n(1),d=n(10);function v(){return r.a.createElement(\"div\",null,r.a.createElement(\"h1\",null,\"Welcome to My Weather App\"),r.a.createElement(\"p\",null,\" Please select the city and country to see the weather below \"))}function w(e){return r.a.createElement(\"form\",{onSubmit:e.loadWeather},r.a.createElement(\"input\",{type:\"text\",name:\"city\",placeholder:\"Input City Here\"}),r.a.createElement(\"input\",{type:\"text\",name:\"country\",placeholder:\"Input Country Here\"}),r.a.createElement(\"input\",{type:\"submit\",value:\"Submit\"}))}function f(e){return r.a.createElement(\"div\",null,e.WeatherCompCity&&r.a.createElement(\"p\",null,\"City: \",e.WeatherCompCity,\" \"),e.WeatherCompCountry&&r.a.createElement(\"p\",null,\"Country: \",e.WeatherCompCountry,\" \"),e.WeatherCompTemp&&r.a.createElement(\"p\",null,\"Temp: \",e.WeatherCompTemp,\" \"))}var C=function(e){function t(e){var n;return Object(m.a)(this,t),(n=Object(p.a)(this,Object(h.a)(t).call(this,e))).getweather=function(){var e=Object(l.a)(i.a.mark(function e(t){var n,a,r,o,c;return i.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),n=t.target.city.value,a=t.target.country.value,r=\"http://api.openweathermap.org/data/2.5/weather?q=\"+n+\",\"+a+\"&APPID=14b174dcab9bf47b49468e07daa1ff87\",e.next=6,fetch(r);case 6:return o=e.sent,e.next=9,o.json();case 9:return c=e.sent,console.log(c),e.next=13,this.setState({temperature:c.main.temp,city:c.name,country:c.sys.country});case 13:console.log(this.state.city),console.log(this.state.temperature);case 15:case\"end\":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}(),n.getweather=n.getweather.bind(Object(y.a)(n)),n.state={temperature:void 0,city:void 0,country:void 0},n}return Object(d.a)(t,e),Object(s.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",null,r.a.createElement(v,null),r.a.createElement(w,{loadWeather:this.getweather}),r.a.createElement(f,{WeatherCompCity:this.state.city,WeatherCompCountry:this.state.country,WeatherCompTemp:this.state.temperature}))}}]),t}(r.a.Component);c.a.render(r.a.createElement(C,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[11,1,2]]]);","extractedComments":[]}