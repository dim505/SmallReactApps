{"map":"{\"version\":3,\"sources\":[\"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\src\\\\serviceWorker.js\",\"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\src\\\\components\\\\title.js\",\"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\src\\\\components\\\\forms.js\",\"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\src\\\\components\\\\weather.js\",\"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\src\\\\App.js\",\"C:\\\\Users\\\\bob\\\\Documents\\\\Visual Studio 2015\\\\Projects\\\\my-app\\\\src\\\\index.js\"],\"names\":[\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"Titles\",\"props\",\"react_default\",\"a\",\"createElement\",\"Forms\",\"onSubmit\",\"loadWeather\",\"type\",\"name\",\"placeholder\",\"value\",\"Weather\",\"App\",\"getweather\",\"_callee\",\"e\",\"api_call\",\"results\",\"regenerator_default\",\"wrap\",\"_context\",\"prev\",\"next\",\"fetch\",\"sent\",\"json\",\"preventDefault\",\"console\",\"log\",\"stop\",\"this\",\"React\",\"Component\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"wKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yHCdS,SAASC,EAAOC,GAC3B,OACIC,EAAAC,EAAAC,cAAA,MAAA,KACIF,EAAAC,EAAAC,cAAA,KAAA,KAAA,6BACAF,EAAAC,EAAAC,cAAA,IAAA,KAAA,kECLG,SAASC,EAAOJ,GAI3B,OAEIC,EAAAC,EAAAC,cAAA,OAAA,CAAME,SAAUL,EAAMM,aAElBL,EAAAC,EAAAC,cAAA,QAAA,CAAOI,KAAK,OAAOC,KAAK,OAAOC,YAAY,oBAC3CR,EAAAC,EAAAC,cAAA,QAAA,CAAOI,KAAK,OAAOC,KAAK,UAAUC,YAAY,uBAC9CR,EAAAC,EAAAC,cAAA,QAAA,CAAOI,KAAK,SAASG,MAAM,YCRxB,SAASC,EAAQX,GAGxB,OAASC,EAAAC,EAAAC,cAAA,MAAA,KAAA,KAAOF,EAAAC,EAAAC,cAAA,IAAA,KAAA,uBAAP,SCyBFS,6MAtBXC,iDAAa,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAC,EAAAhB,EAAAiB,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EACcC,MAAM,qGADpB,KAAA,EAAA,OACHP,EADGI,EAAAI,KAAAJ,EAAAE,KAAA,EAEaN,EAASS,OAFtB,KAAA,EAEHR,EAFGG,EAAAI,KAITT,EAAEW,iBACFC,QAAQC,IAAIX,GALH,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAS,SAAAf,oIAWT,OACIb,EAAAC,EAAAC,cAAA,MAAA,KACIF,EAAAC,EAAAC,cAACJ,EAAD,MACAE,EAAAC,EAAAC,cAACC,EAAD,CAAOE,YAAawB,KAAKjB,aACzBZ,EAAAC,EAAAC,cAACQ,EAAD,cAjBEoB,EAAAA,EAAMC,WCHxBC,EAAAA,EAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SL2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"\\r\\nimport React from 'react';\\r\\n\\r\\n\\r\\nexport default function Titles(props) {\\r\\n    return (\\r\\n        <div>\\r\\n            <h1>Welcome to My Weather App</h1>\\r\\n            <p> Please select the city and country to see the weather below </p>\\r\\n        </div>\\r\\n    )\\r\\n}\\r\\n\",\"import React from 'react';\\r\\n\\r\\n\\r\\nexport default function Forms (props)\\r\\n     {\\r\\n\\r\\n    \\r\\n    return (\\r\\n\\r\\n        <form onSubmit={props.loadWeather}>\\r\\n\\r\\n            <input type=\\\"text\\\" name=\\\"city\\\" placeholder=\\\"Input City Here\\\"/>\\r\\n            <input type=\\\"text\\\" name=\\\"country\\\" placeholder=\\\"Input Country Here\\\"/>\\r\\n            <input type=\\\"submit\\\" value=\\\"Submit\\\"/> \\r\\n\\r\\n         </form>      \\r\\n            \\r\\n                )\\r\\n\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\",\"import React from 'react';\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nexport default function Weather(props)  {\\r\\n    \\r\\n\\r\\n        return ( <div>  <p> Weather Component </p> </div>\\r\\n            \\r\\n            \\r\\n            \\r\\n        )\\r\\n        \\r\\n    \\r\\n\\r\\n}\\r\\n\\r\\n\",\"\\r\\nimport React from 'react';\\r\\nimport Titles from './components/title'\\r\\nimport Forms from './components/forms'\\r\\nimport Weather from './components/weather'\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nclass App extends React.Component {\\r\\n\\r\\n    getweather = async (e) => {\\r\\n        const api_call = await fetch('http://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=14b174dcab9bf47b49468e07daa1ff87')\\r\\n        const results = await api_call.json()\\r\\n        //prevents a full page refresh\\r\\n        e.preventDefault();\\r\\n        console.log(results);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    render() {\\r\\n        return (\\r\\n            <div>\\r\\n                <Titles />\\r\\n                <Forms loadWeather={this.getweather} />\\r\\n                <Weather />\\r\\n\\r\\n\\r\\n            </div>\\r\\n        )\\r\\n    }\\r\\n}\\r\\nexport default App;\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport * as serviceWorker from './serviceWorker';\\nimport App from './App'\\n\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\nserviceWorker.unregister();\\n\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{10:function(e,t,n){e.exports=n(17)},17:function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),o=n(3),c=n.n(o);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var l=n(1),u=n.n(l),i=n(4),p=n(5),s=n(6),m=n(8),h=n(7),d=n(9);function f(e){return r.a.createElement(\"div\",null,r.a.createElement(\"h1\",null,\"Welcome to My Weather App\"),r.a.createElement(\"p\",null,\" Please select the city and country to see the weather below \"))}function w(e){return r.a.createElement(\"form\",{onSubmit:e.loadWeather},r.a.createElement(\"input\",{type:\"text\",name:\"city\",placeholder:\"Input City Here\"}),r.a.createElement(\"input\",{type:\"text\",name:\"country\",placeholder:\"Input Country Here\"}),r.a.createElement(\"input\",{type:\"submit\",value:\"Submit\"}))}function v(e){return r.a.createElement(\"div\",null,\"  \",r.a.createElement(\"p\",null,\" Weather Component \"),\" \")}var b=function(e){function t(){var e,n;Object(p.a)(this,t);for(var a=arguments.length,r=new Array(a),o=0;o<a;o++)r[o]=arguments[o];return(n=Object(m.a)(this,(e=Object(h.a)(t)).call.apply(e,[this].concat(r)))).getweather=function(){var e=Object(i.a)(u.a.mark(function e(t){var n,a;return u.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch(\"http://api.openweathermap.org/data/2.5/weather?q=London,uk&APPID=14b174dcab9bf47b49468e07daa1ff87\");case 2:return n=e.sent,e.next=5,n.json();case 5:a=e.sent,t.preventDefault(),console.log(a);case 8:case\"end\":return e.stop()}},e)}));return function(t){return e.apply(this,arguments)}}(),n}return Object(d.a)(t,e),Object(s.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",null,r.a.createElement(f,null),r.a.createElement(w,{loadWeather:this.getweather}),r.a.createElement(v,null))}}]),t}(r.a.Component);c.a.render(r.a.createElement(b,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[10,1,2]]]);","extractedComments":[]}